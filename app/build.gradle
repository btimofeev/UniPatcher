apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

android {

    signingConfigs {
        release
    }

    defaultConfig {
        applicationId "org.emunix.unipatcher"
        minSdkVersion 21
        compileSdk 31
        targetSdkVersion 31
        ndkVersion "22.1.7171670"
        versionCode 170201
        versionName "0.17.2"
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
        externalNativeBuild {
            cmake {
                cppFlags ""
                arguments "-DANDROID_PLATFORM=android-21", "-DCMAKE_BUILD_TYPE=Release",
                        "-DANDROID_ARM_MODE=arm"
                version "3.10.2"
            }
        }
    }

    buildFeatures {
        dataBinding true
        viewBinding true
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources false
            proguardFile './proguard-android.txt'
            signingConfig signingConfigs.release
        }
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix '-DEBUG'
        }
    }

    flavorDimensions "default"
    productFlavors {
        free {
            buildConfigField "String", "RATE_URL", "\"https://github.com/btimofeev/UniPatcher\""
            buildConfigField "String", "SHARE_URL", "\"https://github.com/btimofeev/UniPatcher\""
            buildConfigField "String", "BITCOIN_ADDRESS", "\"16coztryz7xbNNDNhhf98wuHmi3hEintsW\""
        }
        google {
            buildConfigField "String", "RATE_URL", "\"market://details?id=org.emunix.unipatcher\""
            buildConfigField "String", "SHARE_URL", "\"https://play.google.com/store/apps/details?id=org.emunix.unipatcher\""
            buildConfigField "String", "GOOGLE_PLAY_PUBKEY", "\"MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA384jTCBEuJ8nCWaC4S6AFrnMQN4mBlmkOXHV3Xg5hlFOl8TkVwiCfqz8r20yJpEy0IJ1+3QRnlq59zadUxbkD+PacJlGB/r2b3mbKfu+m0K+e/0aL6eWupjMSIyPgpnbN3uswiBEGUb4ytzYF53ZKTbLARnruQdMnjV6+VyfwMgpor/48anVQawDARBj/AIAj6VGtRHLmg6DmKDyOGQ7uCgXSv+ysnBKJjtIX/L/5nQgL8Q+9jsr2knuWY7j9BmrtpUXaDH3Kb50M1TOCKiqxPGa8lInOOIndABWxcpqmSMXP06SPYOanUlEH7lT0jjqpHpFNx8hRTT9xf652rgMJwIDAQAB\""
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }

    lintOptions {
        disable 'MissingTranslation'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

Properties props = new Properties()
def propFile = file('../../signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {

        println 'RELEASE BUILD SIGNING'

        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'RELEASE BUILD NOT FOUND SIGNING PROPERTIES'

        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'RELEASE BUILD NOT FOUND SIGNING FILE'
    android.buildTypes.release.signingConfig = null
}

dependencies {
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    def coroutines_version = "1.6.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"

    // AndroidX
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.documentfile:documentfile:1.0.1'
    implementation 'androidx.fragment:fragment-ktx:1.4.1'
    def lifecycle_version = "2.4.1"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation 'androidx.preference:preference-ktx:1.2.0'
    implementation 'com.google.android.material:material:1.5.0'

    // Third-party
    //noinspection GradleDependency
    implementation 'commons-io:commons-io:2.5'
    // 2.6 crashes the application on Android below 8, because java.nio.file is not available in these versions

    implementation 'com.github.penn5:donations:3.5.1'

    // DI
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    implementation 'com.jakewharton.timber:timber:4.7.1'

    // Crash reports
    def acraVersion = "5.8.4"
    implementation "ch.acra:acra-mail:$acraVersion"
    implementation "ch.acra:acra-notification:$acraVersion"

// Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:3.9.0'
}

tasks.register("deleteDependencies", Delete) {
    delete 'src/main/cpp/xdelta3/xdelta'
    delete 'src/main/cpp/xz/xz'
}

tasks.register("downloadDependencies") {
    dependsOn deleteDependencies
    def XDelta = '3.1.0'
    def xz = '5.2.4'

    doLast {
        download {
            src "https://github.com/jmacd/xdelta/archive/v${XDelta}.tar.gz"
            dest new File(buildDir, "xdelta-${XDelta}.tar.gz")
        }
        copy {
            from tarTree(resources.gzip("${buildDir}/xdelta-${XDelta}.tar.gz"))
            into 'src/main/cpp/xdelta3/'
        }
        file("src/main/cpp/xdelta3/xdelta-${XDelta}").renameTo(file('src/main/cpp/xdelta3/xdelta'))
        delete("src/main/cpp/xdelta3/pax_global_header")

        download {
            src "https://sourceforge.net/projects/lzmautils/files/xz-${xz}.tar.gz/download"
            dest new File(buildDir, "xz-${xz}.tar.gz")
        }
        copy {
            from tarTree(resources.gzip("${buildDir}/xz-${xz}.tar.gz"))
            into 'src/main/cpp/xz/'
        }
        file("src/main/cpp/xz/xz-${xz}").renameTo(file('src/main/cpp/xz/xz'))
    }
}
